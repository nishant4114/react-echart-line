{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","getOption","title","text","tooltip","trigger","legend","data","toolbox","feature","saveAsImage","grid","left","right","bottom","containLabel","xAxis","type","boundaryGap","yAxis","axisLabel","formatter","series","name","stack","areaStyle","normal","react_default","a","createElement","className","lib_default","option","this","style","height","width","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kSAkFeA,qNA5EbC,UAAY,WACV,MAAO,CACLC,MAAO,CACLC,KAAM,4BAERC,QAAU,CACRC,QAAS,QAEXC,OAAQ,CACNC,KAAK,CAAC,gBAAgB,UAAU,UAElCC,QAAS,CACPC,QAAS,CACPC,YAAa,KAGjBC,KAAM,CACJC,KAAM,KACNC,MAAO,KACPC,OAAQ,KACRC,cAAc,GAEhBC,MAAQ,CACN,CACEC,KAAO,WACPC,aAAc,EACdX,KAAO,CAAC,SAAS,UAAU,YAAY,WAAW,SAAS,WAAW,YAG1EY,MAAQ,CACN,CACEF,KAAO,QACPG,UAAY,CACVC,UAAW,gBAIjBC,OAAS,CACP,CACEC,KAAK,gBACLN,KAAK,OACLO,MAAO,eACPC,UAAW,CAACC,OAAQ,IACpBnB,KAAK,CAAC,IAAK,IAAK,IAAK,IAAK,GAAI,IAAK,MAErC,CACEgB,KAAK,UACLN,KAAK,OACLO,MAAO,eACPC,UAAW,CAACC,OAAQ,IACpBnB,KAAK,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,MAEtC,CACEgB,KAAK,QACLN,KAAK,OACLO,MAAO,eACPC,UAAW,CAACC,OAAQ,IACpBnB,KAAK,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,iFAO1C,OACEoB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,+BACCF,EAAAC,EAAAC,cAACE,EAAAH,EAAD,CACGI,OAAQC,KAAKhC,YACbiC,MAAO,CAACC,OAAQ,QAASC,MAAO,MAAOxB,KAAK,OAC5CkB,UAAU,8BAxEJO,cCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjB,EAAAC,EAAAC,cAACgB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.e4ac89c1.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport ReactEcharts from 'echarts-for-react';\nimport './App.css';\n\nclass App extends Component {\n\n  getOption = () => {\n    return {\n      title: {\n        text: 'Transport Agency records'\n      },\n      tooltip : {\n        trigger: 'axis'\n      },\n      legend: {\n        data:['Maruti Suzuki','Hyundai','Honda']\n      },\n      toolbox: {\n        feature: {\n          saveAsImage: {}\n        }\n      },\n      grid: {\n        left: '3%',\n        right: '4%',\n        bottom: '3%',\n        containLabel: true\n      },\n      xAxis : [\n        {\n          type : 'category',\n          boundaryGap : false,\n          data : ['Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Sunday']\n        }\n      ],\n      yAxis : [\n        {\n          type : 'value',\n          axisLabel : {\n            formatter: '{value} km'\n        }\n        }\n      ],\n      series : [\n        {\n          name:'Maruti Suzuki',\n          type:'line',\n          stack: 'Total amount',\n          areaStyle: {normal: {}},\n          data:[120, 132, 101, 134, 90, 230, 210]\n        },\n        {\n          name:'Hyundai',\n          type:'line',\n          stack: 'Total amount',\n          areaStyle: {normal: {}},\n          data:[220, 182, 191, 234, 290, 330, 310]\n        },\n        {\n          name:'Honda',\n          type:'line',\n          stack: 'Total amount',\n          areaStyle: {normal: {}},\n          data:[150, 232, 201, 154, 190, 330, 410]\n        }\n      ]\n    };\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Simple line chart</h1>\n         <ReactEcharts\n            option={this.getOption()}\n            style={{height: '350px', width: '50%', left:'25%'}}\n            className='react_for_echarts' />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}